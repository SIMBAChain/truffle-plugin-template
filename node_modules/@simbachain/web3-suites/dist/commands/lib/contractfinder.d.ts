/// <reference types="node" />
import * as fs from "fs";
/**
 * function used in many operations in this module. helps us find compiled contracts
 * @param dir
 * @param extension
 * @returns {Promise<string[]>}
 */
export declare const walkDirForContracts: (dir: string, extension: string) => Promise<string[]>;
/**
 * helps read file once we've found it
 * @param filePath
 * @param options
 * @returns
 */
export declare const promisifiedReadFile: (filePath: fs.PathLike, options: {
    encoding?: null;
    flag?: string;
}) => Promise<Buffer>;
/**
 * returns a promise containing an object with {contractName: pathToContractLocation}
 * @returns [Promise<Record<any, any> | void>]
 */
export declare function absolutePaths(): Promise<Record<any, any> | void>;
/**
 * gives the absolute path for a single contract in project
 * @param _absolutePaths
 * @param contractName
 * @returns {string}
 */
export declare function contractAbsolutePath(_absolutePaths: Record<any, any>, contractName: string): string;
/**
 * gives us the path to a contract, but within contracts/simbaimports/
 * @param _absolutePaths
 * @param contractName
 * @returns {string}
 */
export declare function contractSimbaPath(_absolutePaths: Record<any, any>, contractName: string): string;
//# sourceMappingURL=contractfinder.d.ts.map